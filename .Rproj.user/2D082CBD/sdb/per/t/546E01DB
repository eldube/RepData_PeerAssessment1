{
    "contents" : "## PART I\ndatafile <- \"activity.csv\"\n## Download and unzip file from provided URL\nif(!file.exists(datafile)) {\n  fileurl <- \"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip\"\n  filename <- \"repdata-data-activity.zip\"\n  download.file(fileurl, destfile = filename, method = \"internal\")\n  unzip(filename)\n}\n\n#stop if downloading failed or activity.csv file not in working directory\nif(!file.exists(datafile)) {\n  stop(\"Error: activity.csv is not in the working directory.\")\n}\n\n##open project data from unzipped file source\n\n\nprojData <- read.csv(datafile, colClasses = c(\"numeric\", \"Date\", \"numeric\"))\n\n## change integer interval to 4 digit string intervals, and date as Date()\nprojData$intervalFactor <-   factor(sprintf(\"%04d\", projData$interval))\nprojData$date <- as.Date (projData$date, \"%Y-%m-%d\")\n\n## PART 2\n\n## calculate mean total number of steps\nmeanTotalNumberofSteps <- mean(projData$steps, na.rm=TRUE) \n\n## calculate meadian total number of steps\nmedianTotalNumberofSteps <- median(projData$steps, na.rm=TRUE)\n\n\nprint(c (meanTotalNumberofSteps,medianTotalNumberofSteps) )\n\n## DRAW HISTOGRAM\nlibrary(ggplot2)\nhist(projData$steps, col=\"blue\", main = \"Total Number of Steps\", \n     xlab = \"Total Number of Steps per day\")\n\n#qplot( steps, data= dayTypepatternData, binwidth=50, main = \"Total Number of Steps\", \n#      xlab = \"Total Number of Steps per day\")\n\n## PART 3\n## plot daily activity pattern\n\n## Average number of steps across each interval\n##old avgDailyActivity<- tapply (projData$steps, projData$stringInterval, mean, na.rm=TRUE)\n\n\n## create data frame for intervals and averages for each interval\n##old avgpatternData <- data.frame(interval= names(avgDailyActivity), average = avgDailyActivity)\nlibrary(plyr)\navgpatternData <- ddply(projData, \"intervalFactor\", transform, average = mean(steps, na.rm=TRUE))\n\n\n## plot intervals against averages\n\nplot(avgpatternData$interval, avgpatternData$average, type=\"l\", \n     ylab = \"Averge steps per day \", xlab=\"Interval\", \n     main= \"Daily Activity Pattern - part 3\")\n\n## get interval with maximum number of steps, on average\nmaxInterval <- avgpatternData[(avgpatternData$average>= max(avgpatternData$average)),]\nprint( maxInterval[1,]$interval)\n\n##======================== correctly done ===============================================\n\n##PART 4\n\n\n\n## 2. Fill in missing number of steps using median for the day\n## there is no data for 2012, so replace number of steps all with overall average = 37\n## get medians for each day, where median cannot be calculated (no data for the day),\n## replace with overall median value = 0.\n\n\n\n##3. From above, we observe the median is 0 for all days, \n## Transform dataframe by replacing NAs in number of steps by average number of steps\n## in the corresponding time interval \nfilledProjData <-  ddply(projData, .(intervalFactor), transform, intervalMedian = median(steps, na.rm=TRUE))\nfilledProjData$steps <- with( filledProjData, ifelse( is.na(steps), intervalMedian , steps) )\n\n##======================== correctly done ===============================================\n##4. \n\n## DRAW HISTOGRAM\nhist(filledProjData$steps, col=\"blue\", main = \"Total Number of Steps\", \n     xlab = \"Total Number of Steps per day\")\n\n# calculate mean total number of steps\nmeanTotalNumberofSteps <- mean(filledProjData$steps, na.rm=TRUE) \n\n## calculate meadian total number of steps\nmedianTotalNumberofSteps <- median(filledProjData$steps, na.rm=TRUE)\n\n\nprint(c (meanTotalNumberofSteps,medianTotalNumberofSteps) )\n\n## comparison : means is lower (32.4799), median same (==0)\n\n\n## Part 5\n\ndayTypepatternData <- filledProjData\n## add day of the week variable, and day type variable\ndayTypepatternData$day <- weekdays(filledProjData$date)\nweekday <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nweekend <- c(\"Saturday\", \"Sunday\")\ndayTypepatternData$daytype <- factor(ifelse(dayTypepatternData$day %in% weekend, \"weekend\", \"weekday\"))\n\ndayTypepatternData$daytype = with(dayTypepatternData, factor(daytype, levels = rev(levels(daytype))))\n\n\n## claculate interval averages grouped by day type \ndayTypepatternData <-  ddply(dayTypepatternData, .(intervalFactor,daytype), transform, average = median(steps, na.rm=TRUE))\nlibrary(ggplot2)\nrequire(grid)\ng <- qplot( interval, average, data= dayTypepatternData, geom=\"line\")+ facet_wrap(~daytype, ncol=1)+\n  theme(panel.margin = unit(1.5, \"lines\")) + theme(strip.text.y = element_text(colour = 'blue', size = 16))\nprint(g)",
    "created" : 1402588109901.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2413727968",
    "id" : "546E01DB",
    "lastKnownWriteTime" : 1402643991,
    "path" : "C:/Users/dube/RepData_PeerAssessment1/PA1_code.R",
    "project_path" : "PA1_code.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}